name: Publish to NuGet

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: windows-latest 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Clear NuGet Caches
      run: dotnet nuget locals all --clear
      shell: pwsh 

    - name: Install MAUI Workloads
      run: |
        Write-Host "Installing .NET MAUI workloads..."
        dotnet workload install maui --source https://api.nuget.org/v3/index.json
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore MauiSystemFontFamily/MauiSystemFontFamily.csproj
      shell: pwsh

    - name: List NuGet Sources (for debugging)
      if: always() 
      run: dotnet nuget list source
      shell: pwsh

    - name: Build
      run: dotnet build MauiSystemFontFamily/MauiSystemFontFamily.csproj --configuration Release --no-restore
      shell: pwsh

    - name: Pack
      run: dotnet pack MauiSystemFontFamily/MauiSystemFontFamily.csproj --configuration Release --no-build --output ./nuget-packages
      shell: pwsh

    - name: List created packages and validate
      run: |
        $packagePath = "./nuget-packages"
        Write-Host "Checking '$packagePath' directory contents:"
        if (Test-Path $packagePath) {
          $nuGetPackages = Get-ChildItem -Path $packagePath -Filter *.nupkg
          if ($nuGetPackages.Count -gt 0) {
            $nuGetPackages | ForEach-Object { Write-Host "Found package: $($_.FullName)" }
          } else {
            Write-Error "No .nupkg files found in '$packagePath'. Packing might have failed."
            exit 1 # Fallar el step si no hay paquetes
          }
        } else {
          Write-Error "'$packagePath' directory not found. Packing likely failed before this step."
          exit 1 # Fallar el step
        }
      shell: pwsh

    - name: Publish to NuGet
      run: |
        Get-ChildItem -Path ./nuget-packages -Filter *.nupkg | ForEach-Object {
          Write-Host "Pushing package: $($_.FullName)"
          dotnet nuget push $_.FullName --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
        }
      shell: pwsh
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
